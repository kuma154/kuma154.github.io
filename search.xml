<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript事件流</title>
      <link href="/2020/07/23/JavaScript%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
      <url>/2020/07/23/JavaScript%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScriptBOM操作整理"><a href="#JavaScriptBOM操作整理" class="headerlink" title="JavaScriptBOM操作整理"></a>JavaScriptBOM操作整理</h2><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>事件捕获阶段 处于目标阶段 事件冒泡阶段</p><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>事件开始时由最具体的元素接收，然后逐级递增传播到不具体的结点（文档）<br>注意IE8及以下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'box '</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'body '</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>documentElementonclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'html '</span><span class="token punctuation">}</span>ducument<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'document '</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'Window '</span><span class="token punctuation">}</span>输出 box body html document window</code></pre><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>由不太具体的结点更早的接收事件具体的结点最后接收事件<br>事件捕获 true   事件冒泡false </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'box'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'body'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'html'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ducument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'document'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'window'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出 window document html body box</code></pre><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><h4 id="1-HTML事件处理程序"><a href="#1-HTML事件处理程序" class="headerlink" title="1.HTML事件处理程序"></a>1.HTML事件处理程序</h4><p>  缺点：html+js无分离 后期不容易维护</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">'width:200px;height:200px;background:red'</span> onclick<span class="token operator">=</span><span class="token string">'this.innerHTML+="1"'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h4 id="2-DOM0级事件处理程序"><a href="#2-DOM0级事件处理程序" class="headerlink" title="2.DOM0级事件处理程序"></a>2.DOM0级事件处理程序</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'box'</span> style<span class="token operator">=</span><span class="token string">'width:200px;height:200px;background:red'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> box<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>优点：简单 有跨浏览器优势box<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>删除事件处理程序box<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>缺点不能给同一个元素绑定相同的事件处理程序，如果绑定了会有覆盖</code></pre><h4 id="3-DOM2级事件处理程序"><a href="#3-DOM2级事件处理程序" class="headerlink" title="3.DOM2级事件处理程序"></a>3.DOM2级事件处理程序</h4><p>addEventListener removeEventListener<br>IE8浏览器不支持DOM2级处理程序</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'box'</span> style<span class="token operator">=</span><span class="token string">'width:200px;height:200px;background:red'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> box<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'box1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'box2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出 box1box2优点 没有事件覆盖现象无效的移除事件box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'box1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">functiom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'box1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>正确移除事件<span class="token keyword">function</span> <span class="token function">hander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>handle<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>handle<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>删除事件处理程序box<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>缺点不能给同一个元素绑定相同的事件处理程序，如果绑定了会有覆盖</code></pre><h4 id="4-iE事件处理程序"><a href="#4-iE事件处理程序" class="headerlink" title="4.iE事件处理程序"></a>4.iE事件处理程序</h4><p>attachEvent()  detachEvent()<br>缺点：不支持其他浏览器只支持IE10以下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'box'</span> style<span class="token operator">=</span><span class="token string">'width:200px;height:200px;background:red'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> box<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addattachEvevnt</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  IE中<span class="token keyword">this</span>指向window   box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addattachEvevnt</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  IE中<span class="token keyword">this</span>指向window   box<span class="token punctuation">.</span>innerHTML<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>IE9 输出<span class="token number">1</span> <span class="token number">2</span>IE8 输出<span class="token number">2</span> <span class="token number">1</span></code></pre><h3 id="2、document对象"><a href="#2、document对象" class="headerlink" title="2、document对象"></a>2、document对象</h3><pre class=" language-javascript"><code class="language-javascript">document对象：实际上是window对象的属性，document <span class="token operator">==</span> window<span class="token punctuation">.</span>document为<span class="token boolean">true</span>，是唯一一个既属于BOM又属于DOM的对象  document<span class="token punctuation">.</span>lastModified  <span class="token comment" spellcheck="true">//获取最后一次修改页面的日期的字符串表示  </span>document<span class="token punctuation">.</span>referrer  <span class="token comment" spellcheck="true">//用于跟踪用户从哪里链接过来的  </span>document<span class="token punctuation">.</span>title  <span class="token comment" spellcheck="true">//获取当前页面的标题，可读写  </span>document<span class="token punctuation">.</span>URL  <span class="token comment" spellcheck="true">//获取当前页面的URL，可读写  </span>document<span class="token punctuation">.</span>anchors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>或document<span class="token punctuation">.</span>anchors<span class="token punctuation">[</span><span class="token string">"anchName"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//访问页面中所有的锚  </span>document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>或document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">"formName"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//访问页面中所有的表单  </span>document<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>或document<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token string">"imgName"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 访问页面中所有的图像  </span>document<span class="token punctuation">.</span>links <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>或document<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token string">"linkName"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//访问页面中所有的链接 </span>document<span class="token punctuation">.</span>applets <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>或document<span class="token punctuation">.</span>applets<span class="token punctuation">[</span><span class="token string">"appletName"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//访问页面中所有的Applet  </span>document<span class="token punctuation">.</span>embeds <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>或document<span class="token punctuation">.</span>embeds<span class="token punctuation">[</span><span class="token string">"embedName"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//访问页面中所有的嵌入式对象  </span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 或document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将字符串插入到调用它们的位置  </span></code></pre><h3 id="3、location对象"><a href="#3、location对象" class="headerlink" title="3、location对象"></a>3、location对象</h3><pre class=" language-javascript"><code class="language-javascript">location对象：表示载入窗口的URL，也可用window<span class="token punctuation">.</span>location引用它  location<span class="token punctuation">.</span>href  <span class="token comment" spellcheck="true">//当前载入页面的完整URL，如http://www.somewhere.com/pictures/index.htm  </span>location<span class="token punctuation">.</span>portocol  <span class="token comment" spellcheck="true">//URL中使用的协议，即双斜杠之前的部分，如http </span>location<span class="token punctuation">.</span>host  <span class="token comment" spellcheck="true">//服务器的名字，如www.wrox.com  </span>location<span class="token punctuation">.</span>hostname  <span class="token comment" spellcheck="true">//通常等于host，有时会省略前面的www  </span>location<span class="token punctuation">.</span>port  <span class="token comment" spellcheck="true">//URL声明的请求的端口，默认情况下，大多数URL没有端口信息，如8080 </span>location<span class="token punctuation">.</span>pathname  <span class="token comment" spellcheck="true">//URL中主机名后的部分，如/pictures/index.htm  </span>location<span class="token punctuation">.</span>search  <span class="token comment" spellcheck="true">//执行GET请求的URL中的问号后的部分，又称查询字符串，如?param=xxxx  </span>location<span class="token punctuation">.</span>hash  <span class="token comment" spellcheck="true">//如果URL包含#，返回该符号之后的内容，如#anchor1  </span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"http:www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//同location.href，新地址都会被加到浏览器的历史栈中  </span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"http:www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//同assign()，但新地址不会被加到浏览器的历史栈中，不能通过back和forward访问  </span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//重新载入当前页面，为false时从浏览器缓存中重载，为true时从服务器端重载，默认为false  </span></code></pre><h3 id="4、navigator对象"><a href="#4、navigator对象" class="headerlink" title="4、navigator对象"></a>4、navigator对象</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token template-string"><span class="token string">`navigator`</span></span>对象：包含大量有关Web浏览器的信息，在检测浏览器及操作系统上非常有用，也可用window<span class="token punctuation">.</span>navigator引用它  <span class="token template-string"><span class="token string">`navigator.appCodeName`</span></span>  <span class="token comment" spellcheck="true">//浏览器代码名的字符串表示  </span>navigator<span class="token punctuation">.</span>appName  <span class="token comment" spellcheck="true">//官方浏览器名的字符串表示  </span>navigator<span class="token punctuation">.</span>appVersion  <span class="token comment" spellcheck="true">//浏览器版本信息的字符串表示  </span>navigator<span class="token punctuation">.</span>cookieEnabled  <span class="token comment" spellcheck="true">//如果启用cookie返回true，否则返回false  </span>navigator<span class="token punctuation">.</span>javaEnabled  <span class="token comment" spellcheck="true">//如果启用java返回true，否则返回false  </span>navigator<span class="token punctuation">.</span>platform  <span class="token comment" spellcheck="true">//浏览器所在计算机平台的字符串表示  </span>navigator<span class="token punctuation">.</span>plugins  <span class="token comment" spellcheck="true">//安装在浏览器中的插件数组  </span>navigator<span class="token punctuation">.</span>taintEnabled  <span class="token comment" spellcheck="true">//如果启用了数据污点返回true，否则返回false  </span>navigator<span class="token punctuation">.</span>userAgent  <span class="token comment" spellcheck="true">//用户代理头的字符串表示   </span></code></pre><h3 id="5、screen对象"><a href="#5、screen对象" class="headerlink" title="5、screen对象"></a>5、screen对象</h3><pre class=" language-javascript"><code class="language-javascript"> screen对象：用于获取某些关于用户屏幕的信息，也可用window<span class="token punctuation">.</span>screen引用它    screen<span class="token punctuation">.</span>width<span class="token operator">/</span>height  <span class="token comment" spellcheck="true">//屏幕的宽度与高度，以像素计  </span>  screen<span class="token punctuation">.</span>availWidth<span class="token operator">/</span>availHeight  <span class="token comment" spellcheck="true">//窗口可以使用的屏幕的宽度和高度，以像素计 </span>  screen<span class="token punctuation">.</span>colorDepth  <span class="token comment" spellcheck="true">//用户表示颜色的位数，大多数系统采用32位  </span>  window<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>availWidth<span class="token punctuation">,</span> screen<span class="token punctuation">.</span>availHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//填充用户的屏幕</span></code></pre><p>有三种方法能够确定浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）。</p><p>对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：</p><p>window.innerHeight - 浏览器窗口的内部高度</p><p>window.innerWidth - 浏览器窗口的内部宽度<br>对于 Internet Explorer 8、7、6、5：</p><p>document.documentElement.clientHeight</p><p>document.documentElement.clientWidth<br>或者</p><p>document.documentElement.clientHeight</p><p>document.documentElement.clientWidth</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript字符串操作整理</title>
      <link href="/2020/07/21/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/"/>
      <url>/2020/07/21/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript操作整理"><a href="#JavaScript操作整理" class="headerlink" title="JavaScript操作整理"></a>JavaScript操作整理</h2><h3 id="1、字符串转换"><a href="#1、字符串转换" class="headerlink" title="1、字符串转换"></a>1、字符串转换</h3><p>数字类型转String类型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span><span class="token keyword">var</span> mystr<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//"24"</span><span class="token comment" spellcheck="true">// 2.</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//"24"</span><span class="token comment" spellcheck="true">// 3.</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">""</span> <span class="token operator">+</span> num<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//"24"</span></code></pre><h3 id="2、字符串分割"><a href="#2、字符串分割" class="headerlink" title="2、字符串分割"></a>2、字符串分割</h3><p>将字符串进行拆分返回一个新的数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr1<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//["qingchenghuwoguoxiansheng","woaishenghuo","woaiziji"];</span><span class="token keyword">var</span> arr2<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//["q","i","n","g","c","h","e","n","g","h","u","w","o","g","u","o","x","i","a","n","s","h","e","n","g",",","w","o","a","i","s","h","e","n","g","h","u","o",",","w","o","a","i","z","i","j","i"];</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的第二个参数，表示返回的字符串数组的最大长度<span class="token keyword">var</span> arr1<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["qingchenghuwoguoxiansheng","woaishenghuo"];</span><span class="token keyword">var</span> arr2<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["q","i","n","g","c","h","e","n"];</span></code></pre><h3 id="3、字符串替换"><a href="#3、字符串替换" class="headerlink" title="3、字符串替换"></a>3、字符串替换</h3><h4 id="只替换一次"><a href="#只替换一次" class="headerlink" title="只替换一次"></a>只替换一次</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'我是生长在中国南方的纯正中国人'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newstr<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'天朝'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="全部替换"><a href="#全部替换" class="headerlink" title="全部替换"></a>全部替换</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'我是生长在中国南方的纯正中国人'</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span> <span class="token string">'中国'</span> <span class="token punctuation">,</span> <span class="token string">"g"</span> <span class="token punctuation">)</span><span class="token keyword">var</span> newstr<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">'天朝'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="全部替换封装成函数"><a href="#全部替换封装成函数" class="headerlink" title="全部替换封装成函数"></a>全部替换封装成函数</h4><pre class=" language-javascript"><code class="language-javascript">String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">myReplacr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//把a全部替换成b</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>使用<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'我是生长在中国南方的纯正中国人'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newstr<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">myReplace</span><span class="token punctuation">(</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'天朝'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、获取字符串长度"><a href="#4、获取字符串长度" class="headerlink" title="4、获取字符串长度"></a>4、获取字符串长度</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'我是生长在中国南方的纯正中国人'</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre><h3 id="5、查询子字符串"><a href="#5、查询子字符串" class="headerlink" title="5、查询子字符串"></a>5、查询子字符串</h3><p>indexOf()，该Of() 方法对大小写敏感。返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> index<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"llo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2</span><span class="token keyword">var</span> index1<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2</span><span class="token keyword">var</span> index2<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3</span></code></pre><p>lastIndexOf()，该方法对大小写敏感。返回字符串中一个子串最后一处出现的索引（从右到左搜索），如果没有匹配项，返回 -1 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> index<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"llo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2</span><span class="token keyword">var</span> index1<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2</span><span class="token keyword">var</span> index2<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3</span></code></pre><h3 id="6、返回指定位置的字符或其字符编码值"><a href="#6、返回指定位置的字符或其字符编码值" class="headerlink" title="6、返回指定位置的字符或其字符编码值"></a>6、返回指定位置的字符或其字符编码值</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> index<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//o</span></code></pre><p>查找对应位置的字符编码值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> charCode<span class="token operator">=</span>mystr<span class="token punctuation">.</span> <span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//111</span></code></pre><h3 id="7、-字符串匹配"><a href="#7、-字符串匹配" class="headerlink" title="7、 字符串匹配"></a>7、 字符串匹配</h3><p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><p>该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。</p><h4 id="字符串-match"><a href="#字符串-match" class="headerlink" title="字符串 match()"></a>字符串 match()</h4><p>普通字符串的使用方式，此时match方法的返回值是存放首次匹配内容的数组。如果没有找到匹配结果，返回null。语法结构</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">"antzone"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>代码运行效果：<span class="token punctuation">[</span><span class="token string">"n"</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> input<span class="token punctuation">:</span> <span class="token string">"antzone"</span><span class="token punctuation">,</span> groups<span class="token punctuation">:</span> undefined<span class="token punctuation">]</span></code></pre><blockquote><p>对上述代码运行结果分析如下：<br>（1）.match方法在有匹配结果的时候返回值是一个数组。<br>（2）.数组第一个元素是match方法首次匹配到的子字符串，”antzone”虽然有多个”n”，但是返回的数组只存储首次匹配到的”n”，如果match方法的参数是全局匹配的正则，将会存储所有的匹配到的子字符串。<br>（3）.index属性值返回首次匹配到子字符串的位置。<br>（4）.input属性值是原字符串”antzone”。<br>（5）.groups属性当前并不被支持，暂时不做介绍。</p></blockquote><h4 id="正则表达式-match"><a href="#正则表达式-match" class="headerlink" title="正则表达式 match()"></a>正则表达式 match()</h4><p>match方法可在字符串内查找一个或多个与指定正则表达式匹配的子字符串。<br>方法的返回值是存放着匹配结果的数组，</p><blockquote><p>一.非全局匹配：<br>所谓非全局匹配，也就是使用g修饰符<br>此时，match方法最多只在字符串中成功匹配一次：<br>（1）.如果不存在匹配的子字符串，返回null。<br>（2）.如果存在匹配的子字符串，返回一个数组。<br>返回的数组解析如下：<br>首先说明一下，数组元素的索引是从0开始的。<br>（1）.第0个元素是匹配结果。<br>（2）.第1个元素是第一个引用型分组匹配的子字符串。<br>（3）.第2个元素存放的是第二个引用型分组匹配的子字符串，依次类推。<br>返回的数组对象同时具有两个属性：<br>（1）.index：返回匹配的子字符串起始字符在stringObject源字符串中的位置。<br>（2）.input：返回stringObject源字符串。</p><p>二.全局匹配：<br>match方法执行全局匹配，获取所有可以匹配的子字符串：<br>（1）.如果不存在匹配的子字符串，返回null。<br>（2）.如果存在匹配的子字符串，返回一个数组。<br>与非全局匹配的区别：<br>（1）.不具有index和input属性。<br>（2）.不具有引用型分组匹配的子字符串，数组元素仅包含匹配的所有子字符串。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"本站url地址是www.softwhy.com"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex">/why/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上面代码采用非全局模式，运行效果如下：<span class="token punctuation">[</span><span class="token string">"why"</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> input<span class="token punctuation">:</span> <span class="token string">"本站url地址是www.softwhy.com"</span><span class="token punctuation">,</span> groups<span class="token punctuation">:</span> undefined<span class="token punctuation">]</span></code></pre><p>当前JavaScript并不支持groups<br>（1）.数组第0个元素是匹配的子字符串。<br>（2）.index属性值是”why”中”w”在源字符串中的位置。<br>（3）.input属性值是整个源字符串。</p><p>匹配一次</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"hi,mynameisguoxiansheng6,33iswho?"</span><span class="token punctuation">;</span><span class="token keyword">var</span> matchStr<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"guo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//guo</span><span class="token keyword">var</span> matchStr1<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"Guo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//nullvar regexp1=/\d+/g;</span><span class="token keyword">var</span> regexp2<span class="token operator">=</span><span class="token regex">/guo/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> regexp3<span class="token operator">=</span><span class="token regex">/guo/</span><span class="token punctuation">;</span><span class="token keyword">var</span> matchStr2<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//["6","33"]</span><span class="token keyword">var</span> matchStr3<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//["guo"]</span><span class="token keyword">var</span> matchStr3<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span>matchStr3<span class="token punctuation">.</span>index    <span class="token comment" spellcheck="true">//11</span>matchStr3<span class="token punctuation">.</span>input    <span class="token comment" spellcheck="true">//hi,mynameisguoxiansheng6,33iswho?</span></code></pre><h4 id="exec-函数"><a href="#exec-函数" class="headerlink" title="exec()函数"></a>exec()函数</h4><p>仅仅是把正则和字符串换了个位置，即exec()函数是在正则上调用，传递字符串的参数。对于上面两个方法，匹配的结果都是返回第一个匹配成功的字符串，如果匹配失败则返回null。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"hi,mynameisguoxiansheng6,33iswho?"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regexp1<span class="token operator">=</span><span class="token regex">/guo/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> matchStr<span class="token operator">=</span>regexp1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//["guo"]</span><span class="token keyword">var</span> regexp2<span class="token operator">=</span><span class="token regex">/guo/</span><span class="token punctuation">;</span><span class="token keyword">var</span> matchStr1<span class="token operator">=</span>regexp2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></code></pre><h4 id="search-函数"><a href="#search-函数" class="headerlink" title="search()函数"></a>search()函数</h4><p>进行正则匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr <span class="token operator">=</span> <span class="token string">"hi,mynameisguoxiansheng6,33iswho?"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regexp1 <span class="token operator">=</span> <span class="token regex">/guo/</span><span class="token punctuation">;</span><span class="token keyword">var</span> matchStr <span class="token operator">=</span> mystr<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regexp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//11</span></code></pre><h3 id="8、字符串连接"><a href="#8、字符串连接" class="headerlink" title="8、字符串连接"></a>8、字符串连接</h3><h4 id="加法操作进行字符串连接"><a href="#加法操作进行字符串连接" class="headerlink" title="加法操作进行字符串连接"></a>加法操作进行字符串连接</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr1<span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">var</span> mystr2<span class="token operator">=</span><span class="token string">"world!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr<span class="token operator">=</span>mystr1<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>mystr2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Hello world!</span></code></pre><h4 id="concat-函数"><a href="#concat-函数" class="headerlink" title="concat()函数"></a>concat()函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr1<span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">var</span> mystr2<span class="token operator">=</span><span class="token string">"world!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr<span class="token operator">=</span>mystr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Hello world!</span></code></pre><p>concat()函数可以有多个参数，传递多个字符串，拼接多个字符串</p><h3 id="9、字符串切割和提取"><a href="#9、字符串切割和提取" class="headerlink" title="9、字符串切割和提取"></a>9、字符串切割和提取</h3><p>有三种可以从字符串中抽取和切割的方法：</p><h4 id="slice-函数："><a href="#slice-函数：" class="headerlink" title="slice()函数："></a>slice()函数：</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> sliceStr1<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ld!</span><span class="token keyword">var</span> sliceStr2<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ld</span><span class="token keyword">var</span> sliceStr3<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lo world!</span><span class="token keyword">var</span> sliceStr4<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lo w</span></code></pre><h4 id="substring-函数"><a href="#substring-函数" class="headerlink" title="substring()函数"></a>substring()函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> sliceStr1<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lo world!</span><span class="token keyword">var</span> sliceStr2<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lo w</span></code></pre><h4 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h4><p>substr函数方法是返回一个从指定位置开始的指定长度的子字符串。使用方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> sliceStr1<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lo world!</span><span class="token keyword">var</span> sliceStr2<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lo wo</span></code></pre><blockquote><p>注：1.slice() 可以为负数，如果起始位置为负数，则从字符串最后一位向前找对应位数并且向后取结束位置，如果为正整数则从前往后取起始位置到结束位置。<br>　　2.substring()只能非负整数，截取起始结束位置同slice()函数一致。</p><p>　　3.substr()与第一、第二种函数不同，从起始位置开始截取，结束位置为第二个参数截取的字符串最大长度。</p><p>以上三种函数未填第二参数时，自动截取起始位置到字符串末尾。</p><p>js中substr和substring都是截取字符串中子串，非常相近，可以有一个或两个参数。<br>语法：substr(start [，length]) 第一个字符的索引是0，start必选 length可选<br>　　　substring(start [, end]) 第一个字符的索引是0，start必选 end可选<br>相同点：当有一个参数时，两者的功能是一样的，返回从start指定的位置直到字符串结束的子串<br>var str = “hello Tony”;<br>str.substr(6);  //Tony<br>str.substring(6); //Tony</p><p>不同点：有两个参数时<br>（1）substr(start,length) 返回从start位置开始length长度的子串<br>“goodboy”.substr(1,6);   //oodboy<br>【注】当length为0或者负数，返回空字符串<br>（2）substring(start,end) 返回从start位置开始到end位置的子串（不包含end）<br>“goodboy”.substring(1,6);  //oodbo</p></blockquote><h3 id="10、字符串大小写转换"><a href="#10、字符串大小写转换" class="headerlink" title="10、字符串大小写转换"></a>10、字符串大小写转换</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> lowCaseStr<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//hello world!</span><span class="token keyword">var</span> upCaseStr<span class="token operator">=</span>mystr<span class="token punctuation">.</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//HELLO WORLD!</span></code></pre><h3 id="11、字符串去空格"><a href="#11、字符串去空格" class="headerlink" title="11、字符串去空格"></a>11、字符串去空格</h3><p>trim方法用来删除字符串前后的空格 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mystr<span class="token operator">=</span><span class="token string">"     hello world      "</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> trimStr<span class="token operator">=</span>mystr<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//hello world</span></code></pre><h3 id="常用的字符串操作"><a href="#常用的字符串操作" class="headerlink" title="常用的字符串操作"></a>常用的字符串操作</h3><h4 id="1-字符串去重"><a href="#1-字符串去重" class="headerlink" title="1.字符串去重"></a>1.字符串去重</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"aahhgggsssjjj"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">removeRepeat</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arr<span class="token operator">=</span>msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">removeRepeat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ahgsj</span></code></pre><h4 id="2、判断字符串中字符出现的次数"><a href="#2、判断字符串中字符出现的次数" class="headerlink" title="2、判断字符串中字符出现的次数"></a>2、判断字符串中字符出现的次数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*      1.先实现字符串去重      2.然后对去重后的数组用for循环操作，分别与原始数组中各个值进行比较，如果相等则count++,循环结束将count保存在sum数组中，然后将count重置为0      3.这样一来去重后的数组中的元素在原数组中出现的次数与sum数组中的元素是一一对应的  */</span>  <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"aacccbbeeeddd"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> arr<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              count<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      sum<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>      count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//["a", "c", "b", "e", "d"]  </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"偶数"</span><span class="token punctuation">:</span><span class="token string">"奇数"</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"出现了"</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"出现了"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript注意</title>
      <link href="/2020/07/21/JavaScript%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
      <url>/2020/07/21/JavaScript%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript注意"><a href="#JavaScript注意" class="headerlink" title="JavaScript注意"></a>JavaScript注意</h2><h3 id="判断是否为数组"><a href="#判断是否为数组" class="headerlink" title="判断是否为数组"></a>判断是否为数组</h3><p>就算变量定义的是数组格式，typeof 返回的数据类型还是 object :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> cars<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Saab"</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Volvo"</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"BMW"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> cars<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// object</span></code></pre><h4 id="判断方法1"><a href="#判断方法1" class="headerlink" title="判断方法1"></a>判断方法1</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> cars<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Saab"</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Volvo"</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"BMW"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="判断方法2"><a href="#判断方法2" class="headerlink" title="判断方法2"></a>判断方法2</h4><p>instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> cars<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Saab"</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Volvo"</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"BMW"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cars <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h3 id="typeof-和-instanceof-区别"><a href="#typeof-和-instanceof-区别" class="headerlink" title="typeof 和 instanceof 区别"></a>typeof 和 instanceof 区别</h3><blockquote><p>typeof 返回值是一个字符串，该字符串说明运算数的类型<br>typeof 一般只能返回如下几个结果：”number”、”string”、”boolean”、”object”、”function” 和 “undefined”。<br>typeof 来获取一个变量是否存在，如 if(typeof a!=”undefined”){alert(“ok”)}</p><p>判断一个变量的类型尝尝会用 typeof 运算符，在使用 typeof 运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回 “object”。这就需要用到instanceof来检测某个对象是不是另一个对象的实例<br>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p><pre class=" language-javascript"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in"><code class="language-javascript"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Array</span>();alert(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true，</span>同时 alert(a <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">//也会返回 true;</span>这是因为 <span class="built_in">Array</span> 是 object 的子类。</code></pre></blockquote><h3 id="let作用域规则"><a href="#let作用域规则" class="headerlink" title="let作用域规则"></a>let作用域规则</h3><blockquote><p>let允许你声明一个作用域被限制在块级中的变量、语句或者表达式。在Function中局部变量推荐使用let变量，避免变量名冲突。</p><p>let 声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于var声明的变量的作用域是整个封闭函数。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1</span><span class="token punctuation">}</span></code></pre><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript 对象是键值对的容器，“键”必须为字符串，“值”可以是 JavaScript 中除 null 和 undefined 以外的任意数据类型。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bird <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">"Amy"</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    color <span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>    skill <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    nickname <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//非法</span>    play <span class="token punctuation">:</span> undefined  <span class="token comment" spellcheck="true">//非法</span><span class="token punctuation">}</span></code></pre><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>每个对象都有prototype属性，Javascript中对象的prototype属性的解释是：返回对象类型原型的引用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 "Object"</span></code></pre><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>javascript的方法可以分为三类：<br>a 类方法<br>b 对象方法<br>c 原型方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//对象方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>Introduce<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"My name is "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类方法</span>People<span class="token punctuation">.</span>Run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"I can run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原型方法</span>People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>IntroduceChinese<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我的名字是"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">var</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"Windking"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">Introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>People<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">IntroduceChinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h4><p>prototype是一个对象，因此，你能够给它添加属性。你添加给prototype的属性将会成为使用这个构造函数创建的对象的通用属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fish</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token operator">=</span>color<span class="token punctuation">;</span><span class="token punctuation">}</span>Fish<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>livesIn<span class="token operator">=</span><span class="token string">"water"</span><span class="token punctuation">;</span>Fish<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> fish1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token string">"mackarel"</span><span class="token punctuation">,</span> <span class="token string">"gray"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fish2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token string">"goldfish"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fish3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token string">"salmon"</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span>fish<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>fish<span class="token punctuation">.</span>color<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>fish<span class="token punctuation">.</span>livesIn<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>fish<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当一个对象被创建时，这个构造函数 将会把它的属性prototype赋给新对象的内部属性<strong>proto</strong>。这个<strong>proto</strong>被这个对象用来查找它的属性。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>返回一个指向创建了该对象原型的函数引用。需要注意的是，该属性的值是那个函数本身，而不是一个包含函数名称的字符串。对于原始值（如1，true 或 “test”），该属性为只读。<br>所有对象都会从它的原型上继承一个 constructor 属性：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span> <span class="token comment" spellcheck="true">// 或者 o = {}</span>o<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span>  <span class="token comment" spellcheck="true">// 或者 a = []</span>a<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Array<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>n<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Number</code></pre><h4 id="打印出一个对象的构造函数"><a href="#打印出一个对象的构造函数" class="headerlink" title="打印出一个对象的构造函数"></a>打印出一个对象的构造函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Tree</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> theTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token string">"Redwood"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"theTree.constructor is "</span> <span class="token operator">+</span> theTree<span class="token punctuation">.</span>constructor <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出：</p><pre class=" language-javascript"><code class="language-javascript">theTree<span class="token punctuation">.</span>constructor is <span class="token keyword">function</span> <span class="token function">Tree</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueDemo合集</title>
      <link href="/2020/07/10/VueDemo%E5%90%88%E9%9B%86/"/>
      <url>/2020/07/10/VueDemo%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Demo合集"><a href="#Demo合集" class="headerlink" title="Demo合集"></a>Demo合集</h3><p><img src="http://pic.netbian.com/uploads/allimg/200425/135417-1587794057ab38.jpg" alt></p><p>首页：<a href="https://kuma154.github.io/vueDemo/">点击跳转</a></p><p>随机密码生成器：<a href="https://kuma154.github.io/createpwdDemo/">点击跳转</a></p><p>记事本：<a href="https://kuma154.github.io/vueDemo/index05.html">点击跳转</a></p><p>笑话获取：<a href="https://kuma154.github.io/vueDemo/index06.html">点击跳转</a></p><p>获取天气城市：<a href="https://kuma154.github.io/vueDemo/index07.html">点击跳转</a></p><p>计算机：<a href="https://kuma154.github.io/vueDemo/index09.html">点击跳转</a></p>]]></content>
      
      
      <categories>
          
          <category> 网页项目 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> CSS </tag>
            
            <tag> 网页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>壁纸导航</title>
      <link href="/2020/07/10/%E5%A3%81%E7%BA%B8%E5%AF%BC%E8%88%AA/"/>
      <url>/2020/07/10/%E5%A3%81%E7%BA%B8%E5%AF%BC%E8%88%AA/</url>
      
        <content type="html"><![CDATA[<h3 id="壁纸导航"><a href="#壁纸导航" class="headerlink" title="壁纸导航"></a>壁纸导航</h3><p><img src="http://pic.netbian.com/uploads/allimg/200214/112541-15816507417005.jpg" alt></p><p><a href="https://kuma154.github.io/wallpaper/">点击跳转</a></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
          <category> 网页项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页 </tag>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路径</title>
      <link href="/2020/05/25/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/05/25/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="前端学习路径图"><a href="#前端学习路径图" class="headerlink" title="前端学习路径图"></a>前端学习路径图</h2><p><a href="https://www.processon.com/view/link/5d3a5947e4b0511f13134ced#map" target="_blank" rel="noopener">传送门</a></p><h3 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h3><p>知识点包括js类型、typeof、instanceof，类型转换<br>作用域与作用域链、变量提升<br>js原型链、new、继承方式<br>this指向、闭包、垃圾回收机制事件<br>队列、事件循环DOM对象<br>事件委托、DOM事件模型<br>原生ajax</p><h3 id="Html5-CSS3"><a href="#Html5-CSS3" class="headerlink" title="Html5+CSS3"></a>Html5+CSS3</h3><p>html5新特性、语义化<br>浏览器渲染机制、重绘、重排<br>css盒子模型、flex、动画<br>css样式优先级<br>BFC</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h4><p>vue生命周期、keep-alive<br>computed与watch<br>v-for中key的作用<br>vue组件的通信方式<br>指令</p><h4 id="vue底层原理"><a href="#vue底层原理" class="headerlink" title="vue底层原理"></a>vue底层原理</h4><p>双向绑定实现原理<br>v-model的实现<br>nextTick的实现<br>vnode的理解，compiler和patch的过程<br>new Vue后整个的流程<br>keep-alive的实现<br>vuex、vue-router实现原理</p><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><p>http特性以及状态码<br>http的三次握手<br>http1.0、http1.1、http2.0的区别<br>http如何实现缓存<br>https的握手过程<br>输入url后http请求的完整过程<br>get与post请求区别</p><h3 id="web安全"><a href="#web安全" class="headerlink" title="web安全"></a>web安全</h3><p>理解xss，csrf，ddos攻击原理以及避免方式<br>xss与csrf的区别</p><h3 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h3><p>前端性能优化的几种方式<br>如何做性能优化上报<br>如何实现一个错误监控系统<br>什么是同源策略<br>前后端如何通信<br>跨域通信的几种方式</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数常用片段(BOM,Cookie,DOM)</title>
      <link href="/2020/05/24/JavaScript%E5%87%BD%E6%95%B0%E5%B8%B8%E7%94%A8%E7%89%87%E6%AE%B5(%E4%BA%8C)/"/>
      <url>/2020/05/24/JavaScript%E5%87%BD%E6%95%B0%E5%B8%B8%E7%94%A8%E7%89%87%E6%AE%B5(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器对象-BOM"><a href="#浏览器对象-BOM" class="headerlink" title="浏览器对象 BOM"></a>浏览器对象 BOM</h2><h3 id="返回当前网页地址"><a href="#返回当前网页地址" class="headerlink" title="返回当前网页地址"></a>返回当前网页地址</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">currentURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="获取滚动条位置"><a href="#获取滚动条位置" class="headerlink" title="获取滚动条位置"></a>获取滚动条位置</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getScrollPosition</span><span class="token punctuation">(</span>el <span class="token operator">=</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> el<span class="token punctuation">.</span>pageXOffset <span class="token operator">!==</span> undefined <span class="token operator">?</span> el<span class="token punctuation">.</span>pageXOffset <span class="token punctuation">:</span> el<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">,</span>    y<span class="token punctuation">:</span> el<span class="token punctuation">.</span>pageYOffset <span class="token operator">!==</span> undefined <span class="token operator">?</span> el<span class="token punctuation">.</span>pageYOffset <span class="token punctuation">:</span> el<span class="token punctuation">.</span>scrollTop<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="页面跳转，是否记录在-history-中"><a href="#页面跳转，是否记录在-history-中" class="headerlink" title="页面跳转，是否记录在 history 中"></a>页面跳转，是否记录在 history 中</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">redirect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> asLink <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  asLink <span class="token operator">?</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">)</span> <span class="token punctuation">:</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="获取-url-中的参数"><a href="#获取-url-中的参数" class="headerlink" title="获取 url 中的参数"></a>获取 url 中的参数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getURLParameters</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> url    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/([^?=&amp;]+)(=([^&amp;]*))/g</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>a<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>a<span class="token punctuation">[</span>v<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a      <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="滚动条回到顶部动画"><a href="#滚动条回到顶部动画" class="headerlink" title="滚动条回到顶部动画"></a>滚动条回到顶部动画</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">scrollToTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> scrollTop <span class="token operator">=</span>    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>scrollToTop<span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">-</span> c <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>scrollToTop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="检测设备类型"><a href="#检测设备类型" class="headerlink" title="检测设备类型"></a>检测设备类型</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">detectDeviceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token regex">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>    navigator<span class="token punctuation">.</span>userAgent  <span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token string">"Mobile"</span>    <span class="token punctuation">:</span> <span class="token string">"Desktop"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expiredays<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> exdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  exdate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>exdate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiredays<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>cookie <span class="token operator">=</span>    key <span class="token operator">+</span>    <span class="token string">"="</span> <span class="token operator">+</span>    <span class="token function">escape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span>    <span class="token punctuation">(</span>expiredays <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">";expires="</span> <span class="token operator">+</span> exdate<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">delCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  exp<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> cval <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cval <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> cval <span class="token operator">+</span> <span class="token string">";expires="</span> <span class="token operator">+</span> exp<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr<span class="token punctuation">,</span>    reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^| )"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=([^;]*)(;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="文档对象-DOM"><a href="#文档对象-DOM" class="headerlink" title="文档对象 DOM"></a>文档对象 DOM</h2><h3 id="固定滚动条"><a href="#固定滚动条" class="headerlink" title="固定滚动条"></a>固定滚动条</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 功能描述：一些业务场景，如弹框出现时，需要禁止页面滚动，  这是兼容安卓和 iOS 禁止页面滚动的解决方案 */</span><span class="token keyword">let</span> scrollTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">preventScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 存储当前滚动位置</span>  scrollTop <span class="token operator">=</span> window<span class="token punctuation">.</span>scrollY<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将可滚动区域固定定位，可滚动区域高度为 0 后就不能滚动了</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"overflow-y"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hidden"</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"fixed"</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"100%"</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token operator">-</span>scrollTop <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// document.body.style['overscroll-behavior'] = 'none'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">recoverScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"overflow-y"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"auto"</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"static"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// document.querySelector('body').style['overscroll-behavior'] = 'none'</span>  window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="判断当前位置是否为页面底部"><a href="#判断当前位置是否为页面底部" class="headerlink" title="判断当前位置是否为页面底部"></a>判断当前位置是否为页面底部</h3><p>返回值为 true/false</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bottomVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> window<span class="token punctuation">.</span>scrollY <span class="token operator">>=</span>    <span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight <span class="token operator">||</span>      document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="获取元素-css-样式"><a href="#获取元素-css-样式" class="headerlink" title="获取元素 css 样式"></a>获取元素 css 样式</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> ruleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span>ruleName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数常用片段(数组,数字)</title>
      <link href="/2020/05/24/JavaScript%E5%87%BD%E6%95%B0%E5%B8%B8%E7%94%A8%E7%89%87%E6%AE%B5(%E4%B8%80)/"/>
      <url>/2020/05/24/JavaScript%E5%87%BD%E6%95%B0%E5%B8%B8%E7%94%A8%E7%89%87%E6%AE%B5(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h2><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">noRepeat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="查找数组最大"><a href="#查找数组最大" class="headerlink" title="查找数组最大"></a>查找数组最大</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">arrayMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="查找数组最小"><a href="#查找数组最小" class="headerlink" title="查找数组最小"></a>查找数组最小</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">arrayMin</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="将数组分割成多个数组"><a href="#将数组分割成多个数组" class="headerlink" title="将数组分割成多个数组"></a>将数组分割成多个数组</h3><p>size分割的长度</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">chunk</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>      length<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">*</span> size<span class="token punctuation">,</span> i <span class="token operator">*</span> size <span class="token operator">+</span> size<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数返回大于或等于一个给定数字的最小整数。console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">7.004</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 8</span></code></pre><h3 id="检查数组中某元素出现的次数"><a href="#检查数组中某元素出现的次数" class="headerlink" title="检查数组中某元素出现的次数"></a>检查数组中某元素出现的次数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">countOccurrences</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>v <span class="token operator">===</span> value <span class="token operator">?</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> a <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">方法对数组中的每个元素执行一个由您提供的reducer函数</span><span class="token punctuation">(</span>升序执行<span class="token punctuation">)</span>，将其结果汇总为单个返回值。<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 + 2 + 3 + 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 10</span><span class="token comment" spellcheck="true">// 5 + 1 + 2 + 3 + 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 15</span></code></pre><h3 id="扁平化数组"><a href="#扁平化数组" class="headerlink" title="扁平化数组"></a>扁平化数组</h3><p>数组扁平化概念<br>数组扁平化是指将一个多维数组变为一维数组<br>[1, [2, 3, [4, 5]]]  ——&gt;    [1, 2, 3, 4, 5]</p><h4 id="1-reduce"><a href="#1-reduce" class="headerlink" title="1. reduce"></a>1. reduce</h4><p>遍历数组每一项，若值为数组则递归遍历，否则concat。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">:</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-toString-amp-split"><a href="#2-toString-amp-split" class="headerlink" title="2. toString &amp; split"></a>2. toString &amp; split</h4><p>调用数组的toString方法，将数组变为字符串然后再用split分割还原为数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> 因为split分割后形成的数组的每一项值为字符串，所以需要用一个map方法遍历数组将其每一项转换为数值型</code></pre><h4 id="3-join-amp-split"><a href="#3-join-amp-split" class="headerlink" title="3. join &amp; split"></a>3. join &amp; split</h4><p>和上面的toString一样，join也可以将数组转换为字符串</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="4-递归"><a href="#4-递归" class="headerlink" title="4. 递归"></a>4. 递归</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5-扩展运算符"><a href="#5-扩展运算符" class="headerlink" title="5. 扩展运算符"></a>5. 扩展运算符</h4><p>es6的扩展运算符能将二维数组变为一维<br>[].concat(…[1, 2, 3, [4, 5]]);  // [1, 2, 3, 4, 5]<br>根据这个结果我们可以做一个遍历，若arr中含有数组则使用一次扩展运算符，直至没有为止。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="对比两个数组并且返回其中不同的元素"><a href="#对比两个数组并且返回其中不同的元素" class="headerlink" title="对比两个数组并且返回其中不同的元素"></a>对比两个数组并且返回其中不同的元素</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">diffrence</span><span class="token punctuation">(</span>arrA<span class="token punctuation">,</span> arrB<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arrA<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>arrB<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="返回两个数组中相同的元素"><a href="#返回两个数组中相同的元素" class="headerlink" title="返回两个数组中相同的元素"></a>返回两个数组中相同的元素</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">diffrence</span><span class="token punctuation">(</span>arrA<span class="token punctuation">,</span> arrB<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arrA<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arrB<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="从右删除-n-个元素"><a href="#从右删除-n-个元素" class="headerlink" title="从右删除 n 个元素"></a>从右删除 n 个元素</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dropRight</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> n <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="截取第一个符合条件的元素及其以后的元素"><a href="#截取第一个符合条件的元素及其以后的元素" class="headerlink" title="截取第一个符合条件的元素及其以后的元素"></a>截取第一个符合条件的元素及其以后的元素</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dropElements</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="返回数组中下标间隔-nth-的元素"><a href="#返回数组中下标间隔-nth-的元素" class="headerlink" title="返回数组中下标间隔 nth 的元素"></a>返回数组中下标间隔 nth 的元素</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">everyNth</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> nth<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">%</span> nth <span class="token operator">===</span> nth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="返回数组中第-n-个元素"><a href="#返回数组中第-n-个元素" class="headerlink" title="返回数组中第 n 个元素"></a>返回数组中第 n 个元素</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">nthElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="数组乱排"><a href="#数组乱排" class="headerlink" title="数组乱排"></a>数组乱排</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> array <span class="token operator">=</span> arr<span class="token punctuation">;</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    index <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> randomInedx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> middleware <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>randomInedx<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>randomInedx<span class="token punctuation">]</span> <span class="token operator">=</span> middleware<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="数字-Number"><a href="#数字-Number" class="headerlink" title="数字 Number"></a>数字 Number</h2><h3 id="数字千分位分割"><a href="#数字千分位分割" class="headerlink" title="数字千分位分割"></a>数字千分位分割</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">commafy</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token operator">?</span> num<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\d)(?=(?:\d{3})+$)/g</span><span class="token punctuation">,</span> <span class="token string">"$1,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">randomNum</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript复习(代码规范)</title>
      <link href="/2020/05/22/JavaScript%E5%A4%8D%E4%B9%A0(%E4%B8%83)/"/>
      <url>/2020/05/22/JavaScript%E5%A4%8D%E4%B9%A0(%E4%B8%83)/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript复习"><a href="#JavaScript复习" class="headerlink" title="JavaScript复习"></a>JavaScript复习</h2><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><blockquote><p>代码规范通常包括以下几个方面:</p><pre><code>变量和函数的命名规则空格，缩进，注释的使用规则。其他常用规范……规范的代码可以更易于阅读与维护。</code></pre><p>代码规范一般在开发前规定，可以跟你的团队成员来协商设置。</p></blockquote><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><p>变量名推荐使用驼峰法来命名(camelCase):</p><pre class=" language-javascript"><code class="language-javascript">firstName <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>lastName <span class="token operator">=</span> <span class="token string">"Doe"</span><span class="token punctuation">;</span></code></pre><h3 id="空格与运算符"><a href="#空格与运算符" class="headerlink" title="空格与运算符"></a>空格与运算符</h3><p>通常运算符 ( = + - * / ) 前后需要添加空格:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Volvo"</span><span class="token punctuation">,</span> <span class="token string">"Saab"</span><span class="token punctuation">,</span> <span class="token string">"Fiat"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>通常使用 4 个空格符号来缩进代码块：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">toCelsius</span><span class="token punctuation">(</span>fahrenheit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>fahrenheit <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>不推荐使用 TAB 键来缩进，因为不同编辑器 TAB 键的解析不一样。</code></pre><h3 id="语句规则"><a href="#语句规则" class="headerlink" title="语句规则"></a>语句规则</h3><blockquote><p>简单语句的通用规则:</p><p>一条语句通常以分号作为结束符。</p><p>复杂语句的通用规则:</p><p>将左花括号放在第一行的结尾。<br>左花括号前添加一空格。<br>将右花括号独立放在一行。<br>不要以分号结束一个复杂的声明。</p></blockquote><h3 id="对象规则"><a href="#对象规则" class="headerlink" title="对象规则"></a>对象规则</h3><blockquote><p>对象定义的规则:</p><p>将左花括号与类名放在同一行。<br>冒号与属性值间有个空格。<br>字符串使用双引号，数字不需要。<br>最后一个属性-值对后面不要添加逗号。<br>将右花括号独立放在一行，并以分号作为结束符号。</p><pre class=" language-javascript"><span class="keyword"><code class="language-javascript"><span class="keyword">var</span> person = {    firstName: <span class="string">"John"</span>,    lastName: <span class="string">"Doe"</span>,    age: <span class="number">50</span>,    eyeColor: <span class="string">"blue"</span>};</code></pre></blockquote><h3 id="使用小写文件名"><a href="#使用小写文件名" class="headerlink" title="使用小写文件名"></a>使用小写文件名</h3><blockquote><p>大多 Web 服务器 (Apache, Unix) 对大小写敏感： london.jpg 不能通过 London.jpg 访问。</p><p>其他 Web 服务器 (Microsoft, IIS) 对大小写不敏感： london.jpg 可以通过 London.jpg 或 london.jpg 访问。</p><p>你必须保持统一的风格，我们建议统一使用小写的文件名。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript复习(JSON)</title>
      <link href="/2020/05/22/JavaScript%E5%A4%8D%E4%B9%A0(%E5%85%AD)/"/>
      <url>/2020/05/22/JavaScript%E5%A4%8D%E4%B9%A0(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript复习"><a href="#JavaScript复习" class="headerlink" title="JavaScript复习"></a>JavaScript复习</h2><h3 id="JSON概念"><a href="#JSON概念" class="headerlink" title="JSON概念"></a>JSON概念</h3><blockquote><p>JSON 英文全称 JavaScript Object Notation<br>JSON 是一种轻量级的数据交换格式。<br>JSON是独立的语言 *<br>JSON 易于理解。</p></blockquote><h3 id="JSON-实例"><a href="#JSON-实例" class="headerlink" title="JSON 实例"></a>JSON 实例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>site<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"www.runoob.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"www.google.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Taobao"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"www.taobao.com"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h3><blockquote><p>数据为 键/值 对。<br>数据由逗号分隔。<br>大括号保存对象<br>方括号保存数组</p></blockquote><h3 id="JSON-字符串转换为-JavaScript-对象"><a href="#JSON-字符串转换为-JavaScript-对象" class="headerlink" title="JSON 字符串转换为 JavaScript 对象"></a>JSON 字符串转换为 JavaScript 对象</h3><pre class=" language-javascript"><code class="language-javascript">首先，创建 JavaScript 字符串，字符串为 JSON 格式的数据：<span class="token keyword">var</span> text<span class="token operator">=</span><span class="token punctuation">{</span>site<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"www.runoob.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"www.google.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Taobao"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"www.taobao.com"</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">}</span>然后，使用 JavaScript 内置函数 JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 将字符串转换为 JavaScript 对象<span class="token punctuation">:</span><span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> obj<span class="token punctuation">.</span>sites<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>sites<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>url<span class="token punctuation">;</span>结果：Google www<span class="token punctuation">.</span>google<span class="token punctuation">.</span>com</code></pre><h3 id="JavaScript-JSON-parse"><a href="#JavaScript-JSON-parse" class="headerlink" title="JavaScript JSON.parse()"></a>JavaScript JSON.parse()</h3><pre class=" language-javascript"><code class="language-javascript">JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法用于将一个 JSON 字符串转换为对象。JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token punctuation">,</span> reviver<span class="token punctuation">]</span><span class="token punctuation">)</span>参数说明：text<span class="token punctuation">:</span>必需， 一个有效的 JSON 字符串。reviver<span class="token punctuation">:</span> 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。返回值：返回给定 JSON 字符串转换后的对象。</code></pre><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><pre class=" language-javascript"><code class="language-javascript">JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法用于将 JavaScript 值转换为 JSON 字符串。JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token punctuation">,</span> replacer<span class="token punctuation">[</span><span class="token punctuation">,</span> space<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>参数说明：value<span class="token punctuation">:</span>必需， 要转换的 JavaScript 值（通常为对象或数组）。replacer<span class="token punctuation">:</span>可选。用于转换结果的函数或数组。如果 replacer 为函数，则 JSON<span class="token punctuation">.</span>stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：<span class="token string">""</span>。如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。space<span class="token punctuation">:</span>可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 <span class="token number">10</span>，则文本缩进 <span class="token number">10</span> 个空格。space 也可以使用非数字，如：\t。返回值：返回给定 JSON 字符串转换后的对象。<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span> <span class="token string">"site"</span><span class="token punctuation">:</span><span class="token string">"http://www.runoob.com"</span><span class="token punctuation">}</span>str_pretty1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token string">"只有一个参数情况："</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;pre>"</span> <span class="token operator">+</span> str_pretty1 <span class="token operator">+</span> <span class="token string">"&lt;/pre>"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>结果：<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span><span class="token string">"site"</span><span class="token punctuation">:</span><span class="token string">"http://www.runoob.com"</span><span class="token punctuation">}</span>str_pretty2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使用四个空格缩进</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token string">"使用参数情况："</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;pre>"</span> <span class="token operator">+</span> str_pretty2 <span class="token operator">+</span> <span class="token string">"&lt;/pre>"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pre 用于格式化输出</span>结果：<span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span>    <span class="token string">"site"</span><span class="token punctuation">:</span> <span class="token string">"http://www.runoob.com"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript复习(this 关键字)</title>
      <link href="/2020/05/22/JavaScript%E5%A4%8D%E4%B9%A0(%E4%BA%94)/"/>
      <url>/2020/05/22/JavaScript%E5%A4%8D%E4%B9%A0(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript复习"><a href="#JavaScript复习" class="headerlink" title="JavaScript复习"></a>JavaScript复习</h2><h3 id="this概念"><a href="#this概念" class="headerlink" title="this概念"></a>this概念</h3><blockquote><p>面向对象语言中 this 表示当前对象的一个引用。</p><p>但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。</p><p>在方法中，this 表示该方法所属的对象。<br>如果单独使用，this 表示全局对象。<br>在函数中，this 表示全局对象。<br>在函数中，在严格模式下，this 是未定义的(undefined)。<br>在事件中，this 表示接收事件的元素。<br>类似 call() 和 apply() 方法可以将 this 引用到任何对象。</p></blockquote><h3 id="方法中的-this"><a href="#方法中的-this" class="headerlink" title="方法中的 this"></a>方法中的 this</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  lastName <span class="token punctuation">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span>  id       <span class="token punctuation">:</span> <span class="token number">5566</span><span class="token punctuation">,</span>  fullName <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>在对象方法中， <span class="token keyword">this</span> 指向调用它所在方法的对象。在上面一个实例中，<span class="token keyword">this</span> 表示 person 对象。fullName 方法所属的对象就是 person。</code></pre><h3 id="单独使用-this"><a href="#单独使用-this" class="headerlink" title="单独使用 this"></a>单独使用 this</h3><blockquote><p>单独使用 this，则它指向全局(Global)对象。</p><p>在浏览器中，window 就是该全局对象为 [object Window]:</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span></code></pre><h3 id="函数中使用-this（默认）"><a href="#函数中使用-this（默认）" class="headerlink" title="函数中使用 this（默认）"></a>函数中使用 this（默认）</h3>{% blockquote %}在函数中，函数的所属者默认绑定到 this 上。在浏览器中，window 就是该全局对象为 [object Window]:{% endblockquote %}<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="显式函数绑定"><a href="#显式函数绑定" class="headerlink" title="显式函数绑定"></a>显式函数绑定</h3><blockquote><p>在 JavaScript 中函数也是对象，对象则有方法，apply 和 call 就是函数对象的方法。</p><p>这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即 this 绑定的对象。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>  fullName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>person1<span class="token punctuation">.</span>fullName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回 "John Doe"</span></code></pre><h3 id="this-的多种指向"><a href="#this-的多种指向" class="headerlink" title="this 的多种指向:"></a>this 的多种指向:</h3><blockquote><p>1、在对象方法中， this 指向调用它所在方法的对象。<br>2、单独使用 this，它指向全局(Global)对象。<br>3、函数使用中，this 指向函数的所属者。<br>4、严格模式下函数是没有绑定到 this 上，这时候 this 是 undefined。<br>5、在 HTML 事件句柄中，this 指向了接收事件的 HTML 元素。<br>6、apply 和 call 允许切换函数执行的上下文环境（context），即 this 绑定的对象，可以将 this 引用到任何对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript复习(正则表达式)</title>
      <link href="/2020/05/22/JavaScript%E5%A4%8D%E4%B9%A0(%E5%9B%9B)/"/>
      <url>/2020/05/22/JavaScript%E5%A4%8D%E4%B9%A0(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript复习"><a href="#JavaScript复习" class="headerlink" title="JavaScript复习"></a>JavaScript复习</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>正则表达式是由一个字符序列形成的搜索模式。</p><p>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。</p><p>正则表达式可以是一个简单的字符，或一个更复杂的模式。</p><p>正则表达式可用于所有文本搜索和文本替换的操作。</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>/正则表达式主体/修饰符(可选)</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex">/runoob/i</span><span class="token comment" spellcheck="true">// 实例解析：</span><span class="token comment" spellcheck="true">// /runoob/i  是一个正则表达式。</span><span class="token comment" spellcheck="true">// runoob  是一个正则表达式主体 (用于检索)。</span><span class="token comment" spellcheck="true">// i  是一个修饰符 (搜索不区分大小写)。</span></code></pre><p>search() 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p><p>replace() 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法使用正则表达式使用正则表达式搜索 <span class="token string">"Runoob"</span> 字符串，且不区分大小写：<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Visit Runoob!"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/Runoob/i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出结果为：<span class="token number">6</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法使用正则表达式使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 Runoob <span class="token punctuation">:</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Visit Microsoft!"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> txt <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/microsoft/i</span><span class="token punctuation">,</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>结果输出为<span class="token punctuation">:</span> Visit Runoob<span class="token operator">!</span></code></pre><h3 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a>正则表达式修饰符</h3><blockquote><p>i    执行对大小写不敏感的匹配。<br>g    执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。<br>m    执行多行匹配。</p></blockquote><h3 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h3><pre class=" language-javascript"><code class="language-javascript">方括号用于查找某个范围内的字符：表达式    描述<span class="token punctuation">[</span>abc<span class="token punctuation">]</span>    查找方括号之间的任何字符。<span class="token punctuation">[</span><span class="token operator">^</span>abc<span class="token punctuation">]</span>    查找任何不在方括号之间的字符。<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>    查找任何从 <span class="token number">0</span> 至 <span class="token number">9</span> 的数字。<span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>    查找任何从小写 a 到小写 z 的字符。<span class="token punctuation">[</span>A<span class="token operator">-</span>Z<span class="token punctuation">]</span>    查找任何从大写 A 到大写 Z 的字符。<span class="token punctuation">[</span>A<span class="token operator">-</span>z<span class="token punctuation">]</span>    查找任何从大写 A 到小写 z 的字符。<span class="token punctuation">[</span>adgk<span class="token punctuation">]</span>    查找给定集合内的任何字符。<span class="token punctuation">[</span><span class="token operator">^</span>adgk<span class="token punctuation">]</span>    查找给定集合外的任何字符。<span class="token punctuation">(</span>red<span class="token operator">|</span>blue<span class="token operator">|</span>green<span class="token punctuation">)</span>    查找任何指定的选项<span class="token punctuation">(</span>x<span class="token operator">|</span>y<span class="token punctuation">)</span>    查找任何以 <span class="token operator">|</span> 分隔的选项。元字符是拥有特殊含义的字符：元字符    描述<span class="token punctuation">.</span>    查找单个字符，除了换行和行结束符。\w    查找单词字符。\W    查找非单词字符。\d    查找数字。\D    查找非数字字符。\s    查找空白字符。\S    查找非空白字符。\b    匹配单词边界。\B    匹配非单词边界。\<span class="token number">0</span>    查找 NULL 字符。\n    查找换行符。\f    查找换页符。\r    查找回车符。\t    查找制表符。\v    查找垂直制表符。\uxxxx    查找以十六进制数 xxxx 规定的 Unicode 字符。量词    描述n<span class="token operator">+</span>    匹配任何包含至少一个 n 的字符串。例如，<span class="token operator">/</span>a<span class="token operator">+</span><span class="token operator">/</span> 匹配 <span class="token string">"candy"</span> 中的 <span class="token string">"a"</span>，<span class="token string">"caaaaaaandy"</span> 中所有的 <span class="token string">"a"</span>。n<span class="token operator">*</span>    匹配任何包含零个或多个 n 的字符串。例如，<span class="token operator">/</span>bo<span class="token operator">*</span><span class="token operator">/</span> 匹配 <span class="token string">"A ghost booooed"</span> 中的 <span class="token string">"boooo"</span>，<span class="token string">"A bird warbled"</span> 中的 <span class="token string">"b"</span>，但是不匹配 <span class="token string">"A goat grunted"</span>。n<span class="token operator">?</span>    匹配任何包含零个或一个 n 的字符串。例如，<span class="token operator">/</span>e<span class="token operator">?</span>le<span class="token operator">?</span><span class="token operator">/</span> 匹配 <span class="token string">"angel"</span> 中的 <span class="token string">"el"</span>，<span class="token string">"angle"</span> 中的 <span class="token string">"le"</span>。n<span class="token punctuation">{</span>X<span class="token punctuation">}</span>    匹配包含 X 个 n 的序列的字符串。例如，<span class="token operator">/</span>a<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">/</span> 不匹配 <span class="token string">"candy,"</span> 中的 <span class="token string">"a"</span>，但是匹配 <span class="token string">"caandy,"</span> 中的两个 <span class="token string">"a"</span>，且匹配 <span class="token string">"caaandy."</span> 中的前两个 <span class="token string">"a"</span>。n<span class="token punctuation">{</span>X<span class="token punctuation">,</span><span class="token punctuation">}</span>    X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，<span class="token operator">/</span>a<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">/</span> 不匹配 <span class="token string">"candy"</span> 中的 <span class="token string">"a"</span>，但是匹配 <span class="token string">"caandy"</span> 和 <span class="token string">"caaaaaaandy."</span> 中所有的 <span class="token string">"a"</span>。n<span class="token punctuation">{</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">}</span>    X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，<span class="token operator">/</span>a<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">/</span> 不匹配 <span class="token string">"cndy"</span>，匹配 <span class="token string">"candy,"</span> 中的 <span class="token string">"a"</span>，<span class="token string">"caandy,"</span> 中的两个 <span class="token string">"a"</span>，匹配 <span class="token string">"caaaaaaandy"</span> 中的前面三个 <span class="token string">"a"</span>。注意，当匹配 <span class="token string">"caaaaaaandy"</span> 时，即使原始字符串拥有更多的 <span class="token string">"a"</span>，匹配项也是 <span class="token string">"aaa"</span>。n$    匹配任何结尾为 n 的字符串。<span class="token operator">^</span>n    匹配任何开头为 n 的字符串。<span class="token operator">?</span><span class="token operator">=</span>n    匹配任何其后紧接指定字符串 n 的字符串。<span class="token operator">?</span><span class="token operator">!</span>n    匹配任何其后没有紧接指定字符串 n 的字符串。</code></pre><h3 id="使用-RegExp-对象"><a href="#使用-RegExp-对象" class="headerlink" title="使用 RegExp 对象"></a>使用 RegExp 对象</h3><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。<br>RegExp 对象</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> patt<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>或者更简单的方式<span class="token punctuation">:</span><span class="token keyword">var</span> patt<span class="token operator">=</span><span class="token operator">/</span>pattern<span class="token operator">/</span>modifiers<span class="token punctuation">;</span>pattern（模式） 描述了表达式的模式<span class="token function">modifiers</span><span class="token punctuation">(</span>修饰符<span class="token punctuation">)</span> 用于指定全局匹配、区分大小写的匹配和多行匹配注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex">/\w+/</span><span class="token punctuation">;</span></code></pre><blockquote><p>使用 test()<br>test() 方法是一个正则表达式方法。</p><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex">/e/</span><span class="token punctuation">;</span>patt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"The best things in life are free!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出结果： <span class="token boolean">true</span></code></pre><blockquote><p>使用 exec()<br>exec() 方法是一个正则表达式方法。</p><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p><p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token regex">/e/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"The best things in life are free!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出结果： e<span class="token regex">/abc/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"The best things in life are free!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出结果：<span class="token keyword">null</span></code></pre><h3 id="正则表达式表单验证实例"><a href="#正则表达式表单验证实例" class="headerlink" title="正则表达式表单验证实例"></a>正则表达式表单验证实例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*是否带有小数*/</span><span class="token keyword">function</span>    <span class="token function">isDecimal</span><span class="token punctuation">(</span>strValue <span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">var</span>  objRegExp<span class="token operator">=</span> <span class="token regex">/^\d+\.\d+$/</span><span class="token punctuation">;</span>   <span class="token keyword">return</span>  objRegExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>strValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*校验是否中文名称组成 */</span><span class="token keyword">function</span> <span class="token function">ischina</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex">/^[\u4E00-\u9FA5]{2,4}$/</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*定义验证表达式*/</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*进行验证*/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*校验是否全由8位数字组成 */</span><span class="token keyword">function</span> <span class="token function">isStudentNo</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex">/^[0-9]{8}$/</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*定义验证表达式*/</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*进行验证*/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*校验电话码格式 */</span><span class="token keyword">function</span> <span class="token function">isTelCode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg<span class="token operator">=</span> <span class="token regex">/^((0\d{2,3}-\d{7,8})|(1[3584]\d{9}))$/</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*校验邮件地址是否合法 */</span><span class="token keyword">function</span> <span class="token function">IsEmail</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex">/^\w+@[a-zA-Z0-9]{2,10}(?:\.[a-z]{2,4}){1,3}$/</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * [reg 百度网盘链接匹配] * 说明：匹配支持百度分享的两种链接格式 * 格式一：链接: https://pan.baidu.com/s/15gzY8h3SEzVCfGV1xfkJsQ 提取码: vsuw 复制这段内容后打开百度网盘手机App，操作更方便哦 * 格式二：http://pan.baidu.com/share/link?shareid=179436&amp;uk=3272055266 提取码: vsuw 复制这段内容后打开百度网盘手机App，操作更方便哦 * 匹配出下载地址和提取码，并且还支持如果没有提取码，也能匹配出下载链接。 * @type {正则表达式} * @return array 返回匹配成功的链接和地址 */</span><span class="token keyword">function</span> <span class="token function">baiduDownLinkArr</span><span class="token punctuation">(</span> string <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/([http|https]*?:\/\/pan\.baidu\.com\/[(?:s\/){0,1}|(share)]*(?:[0-9a-zA-Z?=&amp;])+)(?:.+:(?:\s)*)?([a-zA-Z]{4})?/</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript复习(字符串函数，类型转换)</title>
      <link href="/2020/05/21/JavaScript%E5%A4%8D%E4%B9%A0(%E4%B8%89)/"/>
      <url>/2020/05/21/JavaScript%E5%A4%8D%E4%B9%A0(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript复习"><a href="#JavaScript复习" class="headerlink" title="JavaScript复习"></a>JavaScript复习</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><pre class=" language-javascript"><code class="language-javascript">$ <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"JohnJohn"</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// x 是字符串</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// h</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 104</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// JohnJohn104104, x+y+y</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2, 索引从0开始</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//J,hnJ,hn</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hnJohn</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hn，[2,3]</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// johnjohn,小写</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// JOHNJOHN,大写</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转成Stirng</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// JOHNJOHN,大写</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// JohnJohn,去除两端的空格</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回某个字符串对象的原始值</span></code></pre><h3 id="JavaScript类型转换"><a href="#JavaScript类型转换" class="headerlink" title="JavaScript类型转换"></a>JavaScript类型转换</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token string">"John"</span>                 <span class="token comment" spellcheck="true">// 返回 string</span><span class="token keyword">typeof</span> <span class="token number">3.14</span>                   <span class="token comment" spellcheck="true">// 返回 number</span><span class="token keyword">typeof</span> <span class="token number">NaN</span>                    <span class="token comment" spellcheck="true">// 返回 number</span><span class="token keyword">typeof</span> <span class="token boolean">false</span>                  <span class="token comment" spellcheck="true">// 返回 boolean</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>              <span class="token comment" spellcheck="true">// 返回 object</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'John'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 返回 object</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 返回 object</span><span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 返回 function</span><span class="token keyword">typeof</span> myCar                  <span class="token comment" spellcheck="true">// 返回 undefined (如果 myCar 没有声明)</span><span class="token keyword">typeof</span> <span class="token keyword">null</span>                   <span class="token comment" spellcheck="true">// 返回 object</span></code></pre><blockquote><p>请注意：</p><p>NaN 的数据类型是 number<br>数组(Array)的数据类型是 object<br>日期(Date)的数据类型为 object<br>null 的数据类型是 object<br>未定义变量的数据类型为 undefined<br>如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是 返回 object。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//判断类型是否是数组</span><span class="token comment" spellcheck="true">// constructor 属性</span><span class="token comment" spellcheck="true">// constructor 属性返回所有 JavaScript 变量的构造函数。</span><span class="token keyword">var</span> myarr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Array"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token function">isArr</span><span class="token punctuation">(</span>myarr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//判断类型是否是Date</span><span class="token keyword">var</span> mydate<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> date<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Date"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token function">isDate</span><span class="token punctuation">(</span>mydate<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="将数字转换为字符串"><a href="#将数字转换为字符串" class="headerlink" title="将数字转换为字符串"></a>将数字转换为字符串</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.</span><span class="token function">String</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 将变量 x 转换为字符串并返回</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 将数字 123 转换为字符串并返回</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">23</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将数字表达式转换为字符串并返回</span><span class="token comment" spellcheck="true">//2.</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="将布尔值转换为字符串"><a href="#将布尔值转换为字符串" class="headerlink" title="将布尔值转换为字符串"></a>将布尔值转换为字符串</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局方法 String() 可以将布尔值转换为字符串。</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 返回 "false"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 返回 "true"</span><span class="token comment" spellcheck="true">//Boolean 方法 toString() 也有相同的效果。</span><span class="token boolean">false</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 返回 "false"</span><span class="token boolean">true</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 返回 "true"</span></code></pre><h4 id="将日期转换为字符串"><a href="#将日期转换为字符串" class="headerlink" title="将日期转换为字符串"></a>将日期转换为字符串</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span><span class="token comment" spellcheck="true">//全局方法 String() 可以将日期对象转换为字符串。</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span><span class="token comment" spellcheck="true">//Date 方法 toString() 也有相同的效果。</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span></code></pre><h4 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a>将字符串转换为数字</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"3.14"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回 3.14</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 返回 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 返回 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"99 88"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 返回 NaN</span></code></pre><blockquote><p>方法                描述<br>parseFloat()        解析一个字符串，并返回一个浮点数。<br>parseInt()            解析一个字符串，并返回一个整数。</p></blockquote><h4 id="自动转换类型"><a href="#自动转换类型" class="headerlink" title="自动转换类型"></a>自动转换类型</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当 JavaScript 尝试操作一个 "错误" 的数据类型时，会自动转换为 "正确" 的数据类型。</span><span class="token comment" spellcheck="true">// 以下输出结果不是你所期望的：</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token keyword">null</span>    <span class="token comment" spellcheck="true">// 返回 5         null 转换为 0</span><span class="token string">"5"</span> <span class="token operator">+</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 返回"5null"   null 转换为 "null"</span><span class="token string">"5"</span> <span class="token operator">+</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true">// 返回 "51"      1 转换为 "1" </span><span class="token string">"5"</span> <span class="token operator">-</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true">// 返回 4         "5" 转换为 5</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript复习(运算、对象)</title>
      <link href="/2020/05/21/JavaScript%E5%A4%8D%E4%B9%A0(%E4%BA%8C)/"/>
      <url>/2020/05/21/JavaScript%E5%A4%8D%E4%B9%A0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript复习"><a href="#JavaScript复习" class="headerlink" title="JavaScript复习"></a>JavaScript复习</h2><h3 id="JS-中的数据类型"><a href="#JS-中的数据类型" class="headerlink" title="JS 中的数据类型"></a>JS 中的数据类型</h3><blockquote><p>基本数据类型：<br>number（数字类型的数据）<br>string（字符串类型）<br>boolean（布尔数据类型）<br>object（对象类型）</p><p>JS 中特殊数据类型<br>undefined(未定义)<br> NaN(不是一个数字) not a number<br> null(空对象)</p></blockquote><h3 id="JS-中的运算符"><a href="#JS-中的运算符" class="headerlink" title="JS 中的运算符"></a>JS 中的运算符</h3><blockquote><p>算数运算符：</p><ul><li><ul><li><ul><li>/ % ++ –</li></ul></li></ul></li></ul><p>逻辑运算符 ：<br>&amp; | ! &amp;&amp; || ^ &lt; &gt; ＜＝  ！＝</p><p>连接符：<br>＋</p><p>特殊运算符：<br>(==)等值符<br>先比较类型 如果类型一致，在比较内容如果类型不一<br>致，这时候会进行强制转换统一转number类型，然后再进行<br>内容的比较<br>(===)等同符：<br>先比较类型 如果类型一致，在比较内容如果类型不一<br>致 直接返回false；</p></blockquote><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><blockquote><p>条件语句<br> if(){}<br> if(){}else{}<br> if(){}else if(){} else if()…else{}<br>分支语句（选择语句）<br>switch(){<br>case value: break;<br> default: break;<br>}</p></blockquote><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><blockquote><p>while(){}<br>至少执行一次循环体<br> do{}while()<br> for(var i=0;i&lt;10;i++){}</p></blockquote><h3 id="JS-中函数的声明"><a href="#JS-中函数的声明" class="headerlink" title="JS 中函数的声明"></a>JS 中函数的声明</h3><blockquote><p>函数声明的三种形式</p><p>（1） function 函数名（）{<br> 函数体<br>}</p><p>(2) var 函数名=function(){<br> 函数体<br>}</p><p>(3) var 函数名=new Function(“函数体”)；</p><p>函数参数传递<br> 在js中实参的个数和形参的个数可以不一致</p><p>函数的返回值<br>如果函数没有return 这时候返回 undefined</p><p>():函数执行符</p></blockquote><h3 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h3><pre class=" language-javascript"><code class="language-javascript">Date 日期对象<span class="token comment" spellcheck="true">//本月中的第几天</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本星期的第几天</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的月份 0-11 </span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的是1900年到现在年份的差值2020-1900</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回全年2020</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2020/5/21 下午12:17:14:返回本地的时间</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Math 对象学习<span class="token comment" spellcheck="true">//获得随机数</span><span class="token keyword">var</span> ran<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="String-对象学习"><a href="#String-对象学习" class="headerlink" title="String 对象学习"></a>String 对象学习</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"b-j-s-x-t"</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"bjsxt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得下标为2的内容</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2 :获得下标</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"sxt"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串截取 开始下标 截取长度</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 截取开始的长度</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串截取 开始下标 结束的下标</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始下标</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串截取的方法</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Global 对象<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token string">"var c=1+1"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把字符串转成可以执行的js的代码</span><span class="token function">eval</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token string">"123a"</span><span class="token punctuation">;</span><span class="token function">Number</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NAN</span><span class="token comment" spellcheck="true">// 检查某个值是否是数字。</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token string">"John"</span>                <span class="token comment" spellcheck="true">// 返回 string</span><span class="token keyword">typeof</span> <span class="token number">3.14</span>                  <span class="token comment" spellcheck="true">// 返回 number</span><span class="token keyword">typeof</span> <span class="token boolean">false</span>                 <span class="token comment" spellcheck="true">// 返回 boolean</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token comment" spellcheck="true">// 返回 object</span>在JavaScript中，数组是一种特殊的对象类型。 因此 <span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 返回 object。<span class="token keyword">typeof</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'John'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 返回 object</span></code></pre><h3 id="undefined-和-null-的区别"><a href="#undefined-和-null-的区别" class="headerlink" title="undefined 和 null 的区别"></a>undefined 和 null 的区别</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> undefined             <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">typeof</span> <span class="token keyword">null</span>                  <span class="token comment" spellcheck="true">// object</span><span class="token keyword">null</span> <span class="token operator">===</span> undefined           <span class="token comment" spellcheck="true">// false</span><span class="token keyword">null</span> <span class="token operator">==</span> undefined            <span class="token comment" spellcheck="true">// true</span></code></pre><blockquote><p>1、定义</p><p> （1）undefined：是所有没有赋值变量的默认值，自动赋值。</p><p> （2）null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。</p><p>2、何时使用null?</p><p>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为 null。</p><p>3、null 与 undefined 的异同点是什么呢？</p><p>共同点：都是原始类型，保存在栈中变量本地。</p><p>不同点：</p><p>（1）undefined——表示变量声明过但并未赋过值。</p><p>它是所有未赋值变量默认值，例如：</p><pre><code>var a;    // a 自动被赋值为 undefined</code></pre><p>（2）null——表示一个变量将来可能指向一个对象。</p><p>一般用于主动释放指向对象的引用，例如：</p><p>它是所有未赋值变量默认值，例如：</p><pre class=" language-javascript"><span class="keyword">var</span> a=[<span class="string">"JOHN"</span>,<span class="string"><code class="language-javascript"><span class="keyword">var</span> a=[<span class="string">"JOHN"</span>,<span class="string">"MARY"</span>];a=<span class="literal">null</span>;<span class="comment">// 释放指向数组的引用</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript复习(概念、组成)</title>
      <link href="/2020/05/21/JavaScript%E5%A4%8D%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2020/05/21/JavaScript%E5%A4%8D%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript复习"><a href="#JavaScript复习" class="headerlink" title="JavaScript复习"></a>JavaScript复习</h2><h3 id="为什么学习-JavaScript（作用）"><a href="#为什么学习-JavaScript（作用）" class="headerlink" title="为什么学习 JavaScript（作用）"></a>为什么学习 JavaScript（作用）</h3><blockquote><p>1、html+css 只是可以实现静态的页面无法实现动态的效果<br>2、表单的校验<br>3、背景图片的更换<br>4、操作节点的信息</p></blockquote><h3 id="JavaScript-的概念"><a href="#JavaScript-的概念" class="headerlink" title="JavaScript 的概念"></a>JavaScript 的概念</h3><blockquote><p>JavaScript 一种直译式脚本语言，是一种动态类型、弱类型、<br>基于原型的语言，内置支持类型</p></blockquote><h3 id="JavaScript-组成"><a href="#JavaScript-组成" class="headerlink" title="JavaScript 组成"></a>JavaScript 组成</h3><blockquote><p>ECMAScript：JavaScript的核心<br>文档对象模型（DOM）：DOM（文档对象模型）是 HTML 和XML 的应用程序接口（API）。<br>DOM 将把整个页面规划成由节点层级构成的文档浏览器对象模型（BOM）对浏览器窗口进行访问和操作！</p></blockquote><h3 id="JavaScript-语言的特点"><a href="#JavaScript-语言的特点" class="headerlink" title="JavaScript 语言的特点"></a>JavaScript 语言的特点</h3><h4 id="1、脚本语言"><a href="#1、脚本语言" class="headerlink" title="1、脚本语言."></a>1、脚本语言.</h4><blockquote><p>脚本语言是一种简单的程序，是由一些ASCII字符构<br>成，可以使用任何一种文本编辑器编写。一些程序<br>语言（如C、C++、Java等）都必须经过编译，将源<br>代码编译成二进制的可执行文件之后才能运行，而<br>脚本语言不需要事先编译，只要有一个与其相适应<br>的解释器就可以执行。<br>脚本语言是指在web浏览器内有解释器解释执行的<br>编程语言，每次运行程序的时候，解释器会把程序<br>代码翻译成可执行的格式。</p></blockquote><h4 id="2、基于对象的语言"><a href="#2、基于对象的语言" class="headerlink" title="2、基于对象的语言"></a>2、基于对象的语言</h4><blockquote><p>面向对象有三大特点（封装，继承，多态）缺一不<br>可。<br>通常“基于对象”是使用对象，但是无法利用现有的<br>对象模板产生新的对象类型，也就是说“基于对象”<br>没有继承的特点。没有了继承的概念也就无从谈论<br>“多态”</p></blockquote><h4 id="3、事件驱动"><a href="#3、事件驱动" class="headerlink" title="3、事件驱动"></a>3、事件驱动</h4><blockquote><p>在网页中执行了某种操作的动作，被称为“事<br>件”(Event)，比如按下鼠标、移动窗口、选择菜单<br>等都可以视为事件。当事件发生后，可能会引起相<br>应的事件响应。</p></blockquote><h4 id="4、简单性"><a href="#4、简单性" class="headerlink" title="4、简单性"></a>4、简单性</h4><blockquote><p>变量类型是采用弱类型，并未使用严格的数据类型。<br>var a,b,c; a=123; b=“abc”; a=b;</p></blockquote><h4 id="5、安全性"><a href="#5、安全性" class="headerlink" title="5、安全性"></a>5、安全性</h4><blockquote><p>JavaScript不能访问本地的硬盘，不能将数据存入<br>到服务器上，不能对网络文档进行修改和删除，只<br>能通过浏览器实现信息浏览或动态交互</p></blockquote><h4 id="6、跨平台性："><a href="#6、跨平台性：" class="headerlink" title="6、跨平台性："></a>6、跨平台性：</h4><blockquote><p>JavaScript依赖于浏览器本身，与操作平台无关，只要计算机安装了支持JavaScript 的浏览器（装有JavaScript解释器），<br>JavaScript 程序就可以正确执行。<br>缺点：<br>各种浏览器支持JavaScript的程度是不一样的，支持和不完全支持JavaScript的 浏览器在浏览同一个带有JavaScript脚本的网页时，效果会有一定的<br>差距，有时甚至会显示不出来。</p></blockquote><h3 id="Js-的引入方式"><a href="#Js-的引入方式" class="headerlink" title="Js 的引入方式"></a>Js 的引入方式</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>JS 引入的方式一 <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"js 的学习课程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>js引入的方式二 type<span class="token punctuation">:</span>引入文件的类型 src 引入文件的路径 charset<span class="token punctuation">:</span>指定引入的编码注意：引入js 的时候千万不要二合一 <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/test.js"</span> charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="js-中的变量"><a href="#js-中的变量" class="headerlink" title="js 中的变量"></a>js 中的变量</h3><blockquote><p>【1】JS中变量的声明：</p><pre><code>var 变量名=值；</code></pre><p>【2】JS中变量的使用注意的事项：</p><p>A、js中的变量的名称和java中标识符的命名保持一致就可以了。</p><p>B、js中变量名称是可以重复的，但是后者的名称会把前者的名称值覆盖</p><p>C、js中末尾即使没有分号结束也是可以的，但是不推荐大家这样书写。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端教学 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>芳文社(NEW GAME！)(二)</title>
      <link href="/2020/05/20/%E8%8A%B3%E6%96%87%E7%A4%BE(NEW%20GAME!2)/"/>
      <url>/2020/05/20/%E8%8A%B3%E6%96%87%E7%A4%BE(NEW%20GAME!2)/</url>
      
        <content type="html"><![CDATA[<p><img src="http://r1.ykimg.com/052600005D2304AE425BD935258E11D4" alt><br>高中毕业后，进入了曾制作自己自幼便入迷的游戏的制作公司“Eagle Jump”的青叶，在那里与担任这款游戏角色设计师的八神光相遇了。开始在憧憬的人手下工作的青叶，虽然对于第一次的工作感到困惑，但在以光为首的充满个性的前辈社员的帮助下一点一点地成长着。描绘在游戏公司工作的女孩子们的日常的工作女孩喜剧，现在开幕！<br><a href="https://www.bilibili.com/bangumi/media/md5027/?from=search&seid=305034957368083051" target="_blank" rel="noopener">点击观看</a></p><p><img src="https://images8.alphacoders.com/718/thumb-1920-718300.png" alt></p><p><img src="https://images7.alphacoders.com/771/thumb-1920-771736.png" alt></p><p><img src="https://images3.alphacoders.com/771/thumb-1920-771745.png" alt></p><p><img src="https://images8.alphacoders.com/771/thumb-1920-771751.png" alt></p><p><img src="https://images5.alphacoders.com/849/thumb-1920-849011.png" alt></p><p><img src="https://images3.alphacoders.com/771/thumb-1920-771746.png" alt></p><p><img src="https://images5.alphacoders.com/873/thumb-1920-873145.png" alt></p><p><img src="https://images2.alphacoders.com/736/thumb-1920-736186.png" alt></p><p><img src="https://images3.alphacoders.com/771/thumb-1920-771681.jpg" alt></p><p><img src="https://images2.alphacoders.com/771/thumb-1920-771737.png" alt></p><p><img src="https://images5.alphacoders.com/718/thumb-1920-718303.png" alt></p><p><img src="https://images8.alphacoders.com/771/thumb-1920-771677.png" alt></p><p><img src="https://images5.alphacoders.com/975/thumb-1920-975960.png" alt></p><p><img src="https://images.alphacoders.com/771/thumb-1920-771752.png" alt></p><p><img src="https://images2.alphacoders.com/704/thumb-1920-704689.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 壁纸 </tag>
            
            <tag> 推荐 </tag>
            
            <tag> 芳文社 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>芳文社(NEW GAME！)(一)</title>
      <link href="/2020/05/20/%E8%8A%B3%E6%96%87%E7%A4%BE(NEW%20GAME!)/"/>
      <url>/2020/05/20/%E8%8A%B3%E6%96%87%E7%A4%BE(NEW%20GAME!)/</url>
      
        <content type="html"><![CDATA[<p><img src="http://r1.ykimg.com/052600005D2304AE425BD935258E11D4" alt><br>高中毕业后，进入了曾制作自己自幼便入迷的游戏的制作公司“Eagle Jump”的青叶，在那里与担任这款游戏角色设计师的八神光相遇了。开始在憧憬的人手下工作的青叶，虽然对于第一次的工作感到困惑，但在以光为首的充满个性的前辈社员的帮助下一点一点地成长着。描绘在游戏公司工作的女孩子们的日常的工作女孩喜剧，现在开幕！<br><a href="https://www.bilibili.com/bangumi/media/md5027/?from=search&seid=305034957368083051" target="_blank" rel="noopener">点击观看</a></p><p><img src="https://images7.alphacoders.com/736/thumb-1920-736185.png" alt></p><p><img src="https://images7.alphacoders.com/710/thumb-1920-710186.jpg" alt></p><p><img src="https://images3.alphacoders.com/771/thumb-1920-771741.png" alt></p><p><img src="https://images4.alphacoders.com/718/thumb-1920-718158.png" alt></p><p><img src="https://images7.alphacoders.com/771/thumb-1920-771763.png" alt></p><p><img src="https://images.alphacoders.com/778/thumb-1920-778241.png" alt></p><p><img src="https://images4.alphacoders.com/736/thumb-1920-736208.png" alt></p><p><img src="https://images8.alphacoders.com/749/thumb-1920-749772.jpg" alt></p><p><img src="https://images5.alphacoders.com/718/thumb-1920-718302.png" alt></p><p><img src="https://images4.alphacoders.com/771/thumb-1920-771679.png" alt></p><p><img src="https://images4.alphacoders.com/873/thumb-1920-873739.jpg" alt></p><p><img src="https://images5.alphacoders.com/975/thumb-1920-975960.png" alt></p><p><img src="https://images5.alphacoders.com/771/thumb-1920-771682.png" alt></p><p><img src="https://images5.alphacoders.com/837/thumb-1920-837851.png" alt></p><p><img src="https://images.alphacoders.com/959/thumb-1920-959924.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 壁纸 </tag>
            
            <tag> 推荐 </tag>
            
            <tag> 芳文社 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我的博客搭建(二)</title>
      <link href="/2020/05/18/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2020/05/18/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="http://p2.so.qhmsg.com/t0251592a3c71e0f21a.jpg" alt></p><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p>点击create repository。</p><h2 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h2><p>回到你的git bash中，</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail"</span></code></pre><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email</code></pre><p>然后创建SSH,一路回车</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail"</span></code></pre><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p>在gitbash中，查看是否成功</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p> <code>[% asset_img https://fei.bar/medias/featureimages/18.jpg 图片1 %]</code></p><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: https://github.com/YourgithubName/YourgithubName.github.io.git  branch: master</code></pre><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>然后</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy</code></pre><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a> 这个网站看到你的博客了！！</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐的一些B站up主</title>
      <link href="/2020/05/18/Third/"/>
      <url>/2020/05/18/Third/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为混迹于B站多年的小清新<img src="https://i0.hdslb.com/bfs/emote/bba7c12aa51fed0199c241465560dfc2714c593e.png@100w_100h.webp" alt><br><img src="http://p2.so.qhmsg.com/t026f049f3360ace178.jpg" alt><br>今天准备在这里给大家推荐一些我喜欢的b站up主,仅代表个人观点和喜好，不具备任何客观性和代表性。篇幅长度有限不能一次性穷尽所有up主<br>主要分区：</p><h3 id="学习区"><a href="#学习区" class="headerlink" title="学习区"></a>学习区</h3><p><a href="http://p2.so.qhmsg.com/t026f049f3360ace178.jpg" target="_blank" rel="noopener">传送门</a></p><h3 id="影视区"><a href="#影视区" class="headerlink" title="影视区"></a>影视区</h3><p><a href="http://p2.so.qhmsg.com/t026f049f3360ace178.jpg" target="_blank" rel="noopener">传送门</a></p><h3 id="switch区"><a href="#switch区" class="headerlink" title="switch区"></a>switch区</h3><p><a href="http://p2.so.qhmsg.com/t026f049f3360ace178.jpg" target="_blank" rel="noopener">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> Bilibili </category>
          
          <category> UP主 </category>
          
          <category> 推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习区 </tag>
            
            <tag> 影视区 </tag>
            
            <tag> switch区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我的博客搭建(一)</title>
      <link href="/2020/05/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2020/05/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>教程分三个部分，</p><p>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。<br>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流<br>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><h4 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h4><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程</p><p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><h4 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h4><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows：nodejs选择LTS版本就行了。</p><p>安装完后，打开命令行</p><pre><code>node -vnpm -v</code></pre><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用</p><h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h4><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>依旧用hexo -v查看一下版本</p><p>至此就全部安装完了。</p><p>接下来初始化一下hexo</p><pre class=" language-bash"><code class="language-bash">hexo init myblog</code></pre><p>这个myblog可以自己取什么名字都行，然后</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> myblog //进入这个myblog文件夹<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹目录下有：</p><p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>** _config.yml: 博客的配置文件**</p><pre class=" language-bash"><code class="language-bash">hexo ghexo server</code></pre><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>使用ctrl+c可以把服务关掉。</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
